{
  "name": "Dragonfly",
  "tagline": "",
  "body": "## Quick start  \r\n### Spawn a reconstruction directory\r\nType in the topmost directory:\r\n\t```\r\n\t./init_new_recon.py\r\n\t```.\r\nThis makes the binaries needed for the package and links them into a new reconstruction directory named \"recon_nnnn\". For help on customizing this setup script (e.g. custom folder name or counter):\r\n\t```\r\n\t./init_new_recon.py -h\r\n\t```.\r\n\r\n### Configure experiment\r\nGo to your newly created recon directory\r\n\t```\r\n\tcd recon_nnnn\r\n\t```.\r\nChange the experiment parameters in config.ini to your liking. \r\nHere are some things that you might like to change:\r\n- ***in_pdb_file***: relative path to your own PDB file\r\n- scattering setup (detector distance, photon wavelength, etc)\r\n\t* parameter unit:\r\n\t\t* ***detd*** (detector distance): millimeter\r\n\t\t* ***lambda*** (photon wavelength): Angstrom\r\n\t\t* ***detsize*** (linear size of detector): pixels in integer\r\n\t\t* ***pixsize***: millimeter\r\n\t\t* ***stoprad*** (radius of beamstop): pixels in float\r\n- ***num_data***: the number of diffraction patterns\r\n- ***fluence***: the incident beam intensity in photons per micron squared\r\n- ***log_file***: name of log file\r\n\r\nWhen ready to start creating synthetic data, type:\r\n\t```\r\n\t./sim_setup.py\r\n\t```.\r\nAgain, you can get help to customize this using the command:\r\n\t```\r\n\t./sim_setup.py -h\r\n\t```.\r\n\r\n### Start your EMC reconstruction\r\n***You can use the convenience script ```run_emc.py``` that we provided to start the reconstruction:***\r\nTyping \r\n\t```\r\n\t./run_emc.py\r\n\t```,\r\nwill start the reconstruction with the default of 10 iterations.\r\nYou can continue to refine the last reconstruction by typing \r\n\t```\r\n\t./run_emc.py -r\r\n\t```,\r\nor if you wanted to increase the quaternion sampling by one, \r\n\t```\r\n\t./run_emc.py -R\r\n\t```.\r\n\r\nIf you have enough processors to do an MPI reconstruction:\r\n\t```\r\n\t./run_emc.py -m <number of MPI processes>\r\n\t```.\r\nFor more information, type:\r\n\t```\r\n\t./run_emc.py -h\r\n\t```.\r\n\r\n\r\n***Or you can start a single process reconstruction in the recon directory with more control way:***\r\n\t```\r\n\t./emc <num_iterations> <path to config file> [threads per process]\r\n\t```,\r\nwhere ```<necessary arguments>``` and ```[optional arguments]```. The default number of threads per process is defined by the system parameter OMP_NUM_THREADS.\r\nBy default, the intermediate output of the reconstruction is stored in the recon directory's data subdirectory.\r\n\r\nTo spawn multiple MPI reconstructions from your recon directory:\r\n\t```\r\n\tmpirun -n <num_mpi_processes> ./emc <num_iterations> <path to config file> [threads per process]\r\n\t```.\r\nBy default, images from the reconstruction that are generated by this script are saved to the data/images subdirectory.\r\n\r\n### Monitor the progress of your reconstruction \r\nIn the recon directory type:\r\n\t```\r\n\t./autoplot.py\r\n\t```.\r\nChecking the \"keep checking\" box will automagically look for new reconstructed 3D volumes in the default data directories.\r\n\r\n### Additional information\r\nFor a more verbose, and maybe informative, view of the underlying setup and reconstruction processes, look at the log files ```recon.log``` and ```EMC.log``` files respectively.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}